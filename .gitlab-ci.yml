# 🦊 GitLab CI/CD Pipeline para FrameFuse API
# Despliegue automatizado con Docker y FFmpeg

stages:
  - build
  - test
  - deploy

variables:
  # Configuración Docker
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_DRIVER: overlay2

  # Variables de la aplicación
  NODE_VERSION: "18"
  PNPM_VERSION: "8"

# 🏗️ BUILD: Construir imagen Docker
build:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker info
    - echo "🐳 Iniciando construcción de imagen Docker..."
  script:
    - echo "🏗️ Construyendo imagen FrameFuse API..."
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG .
    - docker build -t $CI_REGISTRY_IMAGE:latest .

    # Verificar que la imagen se creó correctamente
    - docker images $CI_REGISTRY_IMAGE

    # Login al registry y push
    - echo "📤 Subiendo imagen al GitLab Container Registry..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - docker push $CI_REGISTRY_IMAGE:latest

    echo "✅ Imagen subida exitosamente: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
  only:
    - main
    - develop
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/
      - node_modules/
      - packages/*/node_modules/
  artifacts:
    reports:
      # Guardar información de la imagen construida
      dotenv: build.env
    expire_in: 1 hour

# 🧪 TEST: Ejecutar tests (si existen)
test:
  stage: test
  image: node:${NODE_VERSION}-alpine
  before_script:
    - apk add --no-cache git
    - npm install -g pnpm@${PNPM_VERSION}
    - pnpm install --frozen-lockfile
  script:
    - echo "🧪 Ejecutando tests..."

    # Verificar que el código compila
    - echo "🔨 Verificando compilación TypeScript..."
    - pnpm run build --filter=@framefuse/core
    - pnpm run build --filter=@framefuse/ffmpeg-worker

    # Ejecutar tests si existen
    - echo "🧪 Ejecutando tests automatizados..."
    - pnpm test --filter=@framefuse/core || echo "⚠️ No hay tests en @framefuse/core"
    - pnpm test --filter=@framefuse/ffmpeg-worker || echo "⚠️ No hay tests en @framefuse/ffmpeg-worker"

    # Verificar que la API puede iniciar
    - echo "🚀 Verificando que la API puede iniciar..."
    - cd api && timeout 10s node server.js || echo "⚠️ API no pudo iniciar en 10s (esperado en CI)"

  only:
    - main
    - develop
    - merge_requests
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/
      - node_modules/
      - packages/*/node_modules/
      - packages/*/dist/
  dependencies:
    - build
  allow_failure: true

# 🚀 DEPLOY: Desplegar a producción
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "🚀 Iniciando despliegue..."

    # Verificar que la imagen existe en el registry
    - echo "🔍 Verificando imagen en registry..."
    - curl -f https://$CI_REGISTRY_IMAGE || echo "⚠️ Imagen no accesible públicamente"

    # Aquí puedes agregar comandos para desplegar a tu servidor
    # Ejemplos:
    # - kubectl apply -f k8s/deployment.yaml
    # - docker-compose up -d
    # - ssh user@server "docker pull $CI_REGISTRY_IMAGE:latest && docker-compose restart"

    echo "✅ Despliegue completado"
    echo "📦 Imagen disponible: $CI_REGISTRY_IMAGE:latest"
    echo "🌐 Para usar localmente:"
    echo "   docker run -d -p 3000:3000 $CI_REGISTRY_IMAGE:latest"
  environment:
    name: production
    url: http://your-server.com:3000
  only:
    - main
  dependencies:
    - build
  when: manual  # Requiere aprobación manual para producción

# 🔄 DEPLOY STAGING: Despliegue automático a staging
deploy_staging:
  stage: deploy
  image: alpine:latest
  script:
    - echo "🎭 Desplegando a staging environment..."
    - echo "📦 Imagen: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    # Agregar comandos de despliegue para staging aquí
  environment:
    name: staging
    url: http://staging.your-server.com:3000
  only:
    - develop
  dependencies:
    - build

# 🧹 CLEANUP: Limpiar imágenes antiguas (opcional)
cleanup:
  stage: deploy
  image: docker:24.0.5
  script:
    - echo "🧹 Limpiando imágenes antiguas..."
    # Mantener solo las últimas 10 imágenes
    - docker system prune -f
  only:
    - main
    - develop
  when: manual

# 📊 REPORT: Generar reporte del pipeline
report:
  stage: deploy
  image: alpine:latest
  script:
    - echo "📊 Reporte del Pipeline"
    - echo "Commit: $CI_COMMIT_SHA"
    - echo "Branch: $CI_COMMIT_REF_NAME"
    - echo "Autor: $GITLAB_USER_NAME"
    - echo "Imagen: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    - echo "⏱️ Duración: $CI_JOB_DURATION"
  only:
    - main
    - develop
  when: always