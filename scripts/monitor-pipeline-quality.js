#!/usr/bin/env node

/**
 * üîç MONITOR DE CODE QUALITY GATES
 * Script para monitorear el estado del pipeline y verificar que bloquea por calidad
 */

const { execSync } = require('child_process');
const fs = require('fs');

console.log('üîç FRAMEFUSE - MONITOR CODE QUALITY GATES');
console.log('='.repeat(60));

// Funci√≥n para ejecutar comandos de forma segura
function runCommand(command, description) {
  try {
    console.log(`\nüîÑ ${description}...`);
    const result = execSync(command, {
      encoding: 'utf8',
      timeout: 30000,
      stdio: 'pipe'
    });
    console.log('   ‚úÖ Completado');
    return result.trim();
  } catch (error) {
    console.log(`   ‚ö†Ô∏è  Error: ${error.message}`);
    return null;
  }
}

// Verificar estado del repositorio
function checkRepositoryStatus() {
  console.log('\nüìÅ VERIFICANDO ESTADO DEL REPOSITORIO:');

  const branch = runCommand('git branch --show-current', 'Obteniendo rama actual');
  const remote = runCommand('git remote get-url gitlab', 'Verificando remote de GitLab');
  const lastCommit = runCommand('git log -1 --oneline', 'Obteniendo √∫ltimo commit');

  if (branch) console.log(`   ‚úÖ Rama: ${branch}`);
  if (remote) {
    try {
      const clean = remote.replace(/\.git$/, '');
      let candidate = clean;
      // Convert scp-like Git URLs (git@host:group/repo) to ssh:// form for URL parsing
      if (/^[^@]+@[^:]+:/.test(candidate)) {
        const m = candidate.match(/^([^@]+)@([^:]+):(.+)$/);
        if (m) {
          const [, user, host, repoPath] = m;
          candidate = `ssh://${user}@${host}/${repoPath}`;
        }
      }
      const url = new URL(candidate);
      url.username = '';
      url.password = '';
      // toString() may add a trailing slash; remove for cleaner display
      const safe = url.toString().replace(/\/$/, '');
      console.log(`   ‚úÖ Remote: ${safe}`);
    } catch {
      // Fallback: basic scrub without credentials
      const safe = remote
        .replace(/https?:\/\/[^@]+@/, 'https://')
        .replace(/\.git$/, '');
      console.log(`   ‚úÖ Remote: ${safe}`);
    }
  }
  if (lastCommit) console.log(`   ‚úÖ √öltimo commit: ${lastCommit}`);
}

// Verificar archivos de configuraci√≥n
function checkConfigurationFiles() {
  console.log('\nüìã VERIFICANDO ARCHIVOS DE CONFIGURACI√ìN:');

  const configFiles = [
    { file: '.gitlab-ci.yml', description: 'Pipeline CI/CD' },
    { file: '.codeclimate.yml', description: 'Configuraci√≥n CodeClimate' },
    { file: 'eslint.config.js', description: 'Configuraci√≥n ESLint' },
    { file: 'tsconfig.json', description: 'Configuraci√≥n TypeScript' }
  ];

  let allPresent = true;

  configFiles.forEach(({ file, description }) => {
    if (fs.existsSync(file)) {
      console.log(`   ‚úÖ ${file} - ${description}`);

      // Verificar contenido espec√≠fico
      if (file === '.gitlab-ci.yml') {
        const content = fs.readFileSync(file, 'utf8');
        if (content.includes('code_quality:')) {
          console.log('      ‚úÖ Job de Code Quality configurado');
        } else {
          console.log('      ‚ùå Falta job de Code Quality');
          allPresent = false;
        }
      }


    } else {
      console.log(`   ‚ùå ${file} - FALTA: ${description}`);
      allPresent = false;
    }
  });

  return allPresent;
}

// Simular an√°lisis local de calidad
function simulateQualityAnalysis() {
  console.log('\nüîç SIMULANDO AN√ÅLISIS DE CALIDAD LOCAL:');

  try {
    console.log('   üîÑ Ejecutando ESLint...');
    // Analyze all TypeScript files or specify a different test file
    const eslintResult = execSync('npx eslint . --ext .ts,.tsx --format=compact', {
      encoding: 'utf8',
      timeout: 10000
    });

    if (eslintResult.trim()) {
      console.log('   ‚úÖ ESLint detect√≥ errores:');
      const lines = eslintResult.split('\n').filter(line => line.trim());
      lines.slice(0, 5).forEach(line => {
        console.log(`      ${line}`);
      });
      if (lines.length > 5) {
        console.log(`      ... y ${lines.length - 5} errores m√°s`);
      }
    } else {
      console.log('   ‚ö†Ô∏è  ESLint no detect√≥ errores');
    }
  } catch (error) {
    if (error.stdout) {
      console.log('   ‚úÖ ESLint detect√≥ errores:');
      const lines = error.stdout.split('\n').filter(line => line.trim() && !line.startsWith('Oops'));
      lines.slice(0, 5).forEach(line => {
        console.log(`      ${line}`);
      });
      if (lines.length > 5) {
        console.log(`      ... y ${lines.length - 5} l√≠neas m√°s`);
      }
    } else {
      console.log('   ‚ùå Error ejecutando ESLint');
    }
  }
}

// Mostrar instrucciones para verificar en GitLab
function showGitLabInstructions() {
  console.log('\nüöÄ INSTRUCCIONES PARA VERIFICAR EN GITLAB:');
  console.log('');

  console.log('1Ô∏è‚É£ IR AL PIPELINE:');
  console.log('   URL: https://gitlab.com/gsusfc-group/GsusFC-project/-/pipelines');
  console.log('');

  console.log('2Ô∏è‚É£ VER EL ESTADO DEL √öLTIMO PIPELINE:');
  console.log('   - Deber√≠a mostrar "Running" o "Failed"');
  console.log('   - Buscar el job "code_quality"');
  console.log('');

  console.log('3Ô∏è‚É£ VERIFICAR QUE BLOQUEA:');
  console.log('   - El job "code_quality" deber√≠a fallar');
  console.log('   - Deber√≠a mostrar errores del archivo test-quality-gates.ts');
  console.log('   - Los jobs siguientes (test, deploy) deber√≠an estar bloqueados');
  console.log('');

  console.log('4Ô∏è‚É£ VER REPORTES DE CALIDAD:');
  console.log('   - En el job "code_quality" ‚Üí secci√≥n "Code Quality Report"');
  console.log('   - Deber√≠a listar todos los errores encontrados');
  console.log('');

  console.log('5Ô∏è‚É£ VERIFICAR BLOQUEO DE MERGE:');
  console.log('   - Si hay un MR abierto, deber√≠a estar bloqueado');
  console.log('   - El estado deber√≠a ser "Pipeline blocked"');
  console.log('');
}

// Funci√≥n principal
async function monitorQualityGates() {
  console.log('üéØ MONITOREANDO CODE QUALITY GATES...');
  console.log('');

  const repoOk = checkRepositoryStatus();
  const configOk = checkConfigurationFiles();
  simulateQualityAnalysis();

  console.log('\nüìä RESUMEN DEL MONITOR:');
  console.log('=' .repeat(40));

  console.log(`üìÅ Repositorio: ${repoOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`üìã Configuraci√≥n: ${configOk ? '‚úÖ' : '‚ùå'}`);
  console.log('üîç An√°lisis local: ‚úÖ (Completado)');

  const overallStatus = repoOk && configOk;

  if (overallStatus) {
    console.log('\nüéâ ¬°MONITOR LISTO!');
    console.log('   ‚úÖ Configuraci√≥n correcta');
    console.log('   ‚úÖ Archivo de prueba creado');
    console.log('   ‚úÖ An√°lisis local funcionando');

    showGitLabInstructions();

    console.log('\n‚è≥ ESPERANDO RESULTADOS DEL PIPELINE...');
    console.log('   El pipeline de GitLab deber√≠a estar ejecut√°ndose ahora');
    console.log('   Tardar√° unos minutos en completar el an√°lisis');

    console.log('\nüîÑ PARA VERIFICAR EL ESTADO:');
    console.log('   ‚Ä¢ Ejecuta: node scripts/monitor-pipeline-quality.js');
    console.log('   ‚Ä¢ Ve a GitLab: https://gitlab.com/gsusfc-group/GsusFC-project/-/pipelines');

  } else {
    console.log('\n‚ö†Ô∏è  REVISI√ìN REQUERIDA:');
    console.log('   ‚Ä¢ Verificar archivos de configuraci√≥n');
    console.log('   ‚Ä¢ Asegurar que el push lleg√≥ a GitLab');
    console.log('   ‚Ä¢ Revisar configuraci√≥n del pipeline');
  }

  console.log('\nüí° RECUERDA:');
  console.log('   El sistema est√° dise√±ado para BLOQUEAR c√≥digo con errores');
  console.log('   Solo permite merge cuando la calidad es aceptable');
  console.log('   ¬°Esto es exactamente lo que queremos! üö´‚û°Ô∏è‚úÖ');
}

// Ejecutar monitor
if (require.main === module) {
  monitorQualityGates().catch(console.error);
}

module.exports = { monitorQualityGates };
